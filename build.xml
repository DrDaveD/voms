<?xml version="1.0" encoding="UTF-8" ?>

<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	Build file for the GLite Security VOMS module
-->

<project name="voms" default="dist">

	<!-- =========================================
		 Builds the GLite Security VOMS Module
		 ========================================= -->

	<!-- =========================================
	     Import properties (order is important)
		 ========================================= -->

	<!-- import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- import component build properties,
		        component properties &
		        component common properties -->
	<import file="./project/properties.xml"/>

	<!-- import subsystem build properties,
		        subsystem properties &
		        subsystem common properties -->
	<import file="${subsystem.properties.file}"/>

	<!-- import global build properties &
		        global properties -->
	<import file="${global.properties.file}" />

	<!-- =========================================
		 Load dependency property files (order is important)
		 ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${component.dependencies.file}" />
	<property file="${subsystem.dependencies.file}" />
	<property file="${global.dependencies.file}"/>


	<!-- =========================================
		 Load configure options
		 ========================================= -->
	<import file="${global.configure.options.file}"/>
	<import file="${component.configure.options.file}"/>

	<!-- =========================================
		 Import task definitions (order is important)
		 ========================================= -->
	<import file="${subsystem.taskdefs.file}" />
	<import file="${global.taskdefs.file}" />

	<!-- =========================================
		 Load common targets
		 ========================================= -->
	<import file="${global.targets-make.file}" />

	<!-- =========================================
		 Load version file 
		 ========================================= -->
	<property file="${module.version.file}"/>
	<property file="${module.build.file}"/>

	<!-- ==============================================
		 Local private targets
		 ============================================== -->

	<condition property="do.autogen">
		<equals arg1="${autogen}" arg2="true"/>
	</condition>

	<target name="autogen" if="do.autogen">
		<!-- Call autogen.sh -->
		<bootstrap failonerror="${failonerror}"/>
	</target>

	<condition property="do.configure">
		<or>
			<not>
				<uptodate targetfile="build/Makefile">
					<srcfiles dir="." includes="configure" />
				</uptodate>
			</not>
			<equals arg1="${configure}" arg2="true"/>
		</or>
	</condition>

	<target name="configure" if="do.configure">
		<if>
			<isset property="configure.args"/>
			<then>
				<!-- Call configure-->
				<configure dir="${module.build.dir}" args="${configure.args}" failonerror="${failonerror}"/>
			</then>
			<else>
				<!-- Call configure-->
				<configure dir="${module.build.dir}" failonerror="${failonerror}"/>
			</else>
		</if>
	</target>

	<target name="localinit"
		description="Module specific initialization tasks">
		<antcall target="autogen" />
		<antcall target="configure" />
	</target>

	<target name="localcompile"
		description="Module specific compile tasks">
	</target>

	<target name="localclean"
		description="Module specific cleaning tasks">
	</target>

	<!-- ==============================================
		 Overridden global targets
		 ============================================== -->
	<target name="rpm">
	</target>
	<target name="rpm-init">
	</target>

	<target name="init" depends="envcheck"
		description="">

		<mkdir dir="${module.int.dir}" />
		<mkdir dir="${module.build.dir}" />
		<mkdir dir="${module.autosrc.dir}" />
		<mkdir dir="${module.autodoc.dir}" />
		<mkdir dir="${module.test.dir}" />
		<mkdir dir="${module.test.reports.dir}" />

		<mkdir dir="${stage.dir}" />
		<mkdir dir="${dist.dir}" />

		<!-- codestyle directories -->
		<mkdir dir="${module.codestyle.reports.dir}"/>
		<mkdir dir="${stage.reports.dir}"/>
		<mkdir dir="${stage.codestyle.reports.dir}"/>
		<mkdir dir="${stage.codestyle.reports.dir}/${subsystem.name}"/>

		<condition property="do.bootstrap">
			<equals arg1="false" arg2="true"/>
		</condition>

		<antcall target="init-autotools" />
		<antcall target="localinit" />
	</target>

	<target name="clean" depends="envcheck,localclean"
		description="Override system clean to avoid rebootstrapping.">

		<available file="${module.build.dir}" type="dir" property="build.dir.exists" />

		<antcall target="clean-autotools" />

		<delete dir="${module.build.dir}" />
		<delete dir="${module.dir}/reports" />
		<delete dir="${module.dir}/RPMS" />

		<!-- Delete java api class files -->
		<delete>
			<fileset dir="src/api/java">
				<include name="**/*.class"/>
			</fileset>
		</delete>
	</target>


	<!-- Java apis building -->
	<path id="java-api-build-classpath">
		<fileset dir="jars">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="java-api-runtime-classpath">
		<fileset dir="jars">
			<include name="*.jar"/>
		</fileset>
		<fileset dir=".">
			<include name="voms-api-java.jar"/>
		</fileset>
	</path>
	
	<target name="compile-java-apis">

		<javac srcdir="src/api/java"
	    	         destdir="src/api/java"
	    	         classpathref="java-api-build-classpath"
	    	         debug="on"
	    			/>
	</target>

	<target name="build-java-apis" depends="compile-java-apis">
	
		<jar 
	    			destfile="voms-api-java.jar" 
	    			compress="true"
	    			>
			<fileset dir="src/api/java">
				<exclude name="Makefile*"/>
				<exclude name="**/*.java"/>
				<exclude name="**/*.jar"/>
			</fileset>
	
			<manifest>
				<attribute name="Main-Class" value="org.glite.security.voms.contact.cli.VomsProxyInitClient"/>
			</manifest>
		</jar>
	
	</target>
	
	<target name="voms-proxy-init">
		<java 
			classpathref="java-api-runtime-classpath"
			classname="org.glite.security.voms.contact.cli.VomsProxyInitClient" fork="true">
		</java>
	</target>

	<target name="make-javadoc">
	
		<javadoc 
			access="public" 
			author="true" 
			classpath="/home/andrea/src/cog-1.2/lib/cryptix32.jar:/home/andrea/src/cog-1.2/lib/cog-jglobus.jar:/home/andrea/src/cog-1.2/lib/junit.jar:/home/andrea/src/cog-1.2/lib/log4j-1.2.8.jar:/home/andrea/src/cog-1.2/lib/jgss.jar:/home/andrea/src/cog-1.2/lib/cryptix-asn1.jar:/home/andrea/local/commons-lang-2.2/commons-lang-2.2.jar:/home/andrea/src/cog-1.2/lib/cryptix.jar:/home/andrea/glite-workspace/repository/bcprov-jdk14/1.22/share/jars/bcprov-jdk14-122.jar:/home/andrea/src/cog-1.2/lib/puretls.jar:/home/andrea/local/commons-cli-1.0/commons-cli-1.0.jar" 
			destdir="javadoc" 
			doctitle="VOMS Java APIs" 
			nodeprecated="false" 
			nodeprecatedlist="false" 
			noindex="false" 
			nonavbar="false" 
			notree="false" 
			packagenames="org.glite.security.voms.contact,org.glite.security.voms.contact.cli,org.glite.security.voms.ac,org.glite.security.voms" 
			source="1.3" 
			sourcepath="src/api/java" 
			splitindex="true" 
			use="true" 
			version="true" />
	
	</target>
	
	
	
</project>
