rename fail _fail
rename pass _pass
rename xfail _xfail
rename load_lib _load_lib
rename clone_output _clone_output
rename cleanup _cleanup
rename unsupported _unsupported
set _test_prolog ""
set _test_epilog ""
set _testmessage ""
set LOGOUTS ""

proc load_lib {file} {
    global loaded_libs

    if [info exists loaded_libs($file)] {
        return
    }

    set loaded_libs($file) ""

    if { [search_and_load_file "library file" $file [list $::objdir/lib]] == 0 } {
        _load_lib $file
    }
}

proc fail message {
    global LOGOUTS
    global REPORTDIR
    global _logdescriptor

    puts $_logdescriptor "<td align=\"left\" bgcolor=\"red\">failed</td><td>$message</td>"
    puts $_logdescriptor "<td>"

    foreach name [split $LOGOUTS] {
        if [file exists $name] then {
            set newname [exec mktemp $REPORTDIR/out-XXXXXX]
            file copy -force $name $newname
            puts $_logdescriptor "<a href=\"$newname\">$name</a>"
        }
    }
    puts $_logdescriptor "</td><tr>"
    flush $_logdescriptor
    _fail $message
}

proc pass message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"green\">passed</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    flush $_logdescriptor
    _pass $message
}

proc xfail message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"green\">expected failure</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    _xfail $message
}

proc unsupported message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"orange\">unsupported</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    _unsupported $message
}

proc clone_output {message} {
    set value [string compare -length 25 "ERROR: tcl error sourcing" $message]
    if [expr ! $value] then {
        fail "$message"
    }

    set msg [_clone_output "$message"]
    return "$msg"
}

proc cleanup {} {
    _cleanup
    puts $::_logdescriptor "</table>"

    puts $::_logdescriptor "</body></html>"
    flush $::_logdescriptor
    close $::_logdescriptor
    exec lcov --directory ../src --capture -o app.info -q >/dev/null
    exec lcov -a zero.info -a app.info -o total.info >/dev/null
#    exec rm app1.info zero1.info
    exec lcov -r total.info "/usr*" "*/mystack.c" "*/lex.*.c" "*/vomsfake.tab.c" "*/*soap*.c" "*/vomsparser.c" -o voms.info >/dev/null
#    exec rm total.info
    exec genhtml --show-details --legend --highlight -o $::REPORTDIR/coverage voms.info >/dev/null
    exec rm voms.info

    catch {exec rm -rf $::INSTALLDIR/ca}
    catch {exec rm -rf $::SCRATCHDIR}
}

proc testheader {description {testname ""}} {
    global REPORTDIR

    set scriptname [file normalize [uplevel info script]]
    set fname [file dirname [file dirname $scriptname]]

    set realname [string range $scriptname [string length $$fname] end]
    set newname [exec mktemp $REPORTDIR/out-XXXXXX]
    file copy -force $scriptname $newname
    puts $::_logdescriptor "<tr><td align=\"left\"><a href=\"$newname\">$realname</a></td><td align=\"left\">$description</td>"
    set ::LOGOUTS ""
    set ::_testmessage ""
}

#Error codes should be > 6 to avoid conflicting with DejaGNU's own codes
set ::PASSTEST 1000
set ::FAILTEST 1100
set ::UNDECIDEDTEST 1200


proc testmessage { {message "" } } {
    global _testmessage
    set _testmessage $message
}

proc addlog { name } {
    global LOGOUTS
    set LOGOUTS "$LOGOUTS $name"
}

proc test_set_prolog { name } {
    set ::_test_prolog $name
}

proc test_set_epilog { name } {
    set ::_test_epilog $name
}

proc do_test { {name ""} } {
    global _testmessage

    set res $::UNDECIDEDTEST
    set res2 0

    set scriptname [file normalize [uplevel info script]]
    set fname [file dirname [file dirname $scriptname]]

    set realname [string range $scriptname [string length $$fname] end]

    if {[info exists ::NOJAVALIB] != 0} then {
        if [regexp "vomsapi-java*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return
        }
    }

    if {[info exists ::NOCCLIB] != 0} then {
        if [regexp "vomsapi-cpp*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return
        }
    }

    if {[info exists ::NOCLIB] != 0} then {
        if [regexp "vomsapi-c[0-9]*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return
        }
    }

    _backupVOMS voms1
    if [expr ![string equal $::_test_prolog ""]] then {
        set res2 [catch {set out [$::_test_prolog]} out]
        set $_testmessage "Failure during prolog execution."
    }

    if { $res2 == 0 } then {
        if [expr ! [string equal $name "" ]] then {
            set res [catch {set out [$name]} out]
        } else {
            set res [catch {set out [mytest]} out]
        }

        if [expr ! [ string equal $::_test_epilog ""]] then {
            set res2 [catch {set out2 [$::_test_epilog]} out2]
        }
        # Ensures that an eventual failure from the epilog
        # is considered a failure for the whole test
        if { $res2 != 0 } then {
            set res $res2
            set $_testmessage "Failure during epilog execution."        
        }
    } else {
        set res $res2
    }
    _restoreVOMS voms1

    set ::_test_prolog ""
    set ::_test_epilog ""

    if {$res == 0} then {
        if {$out == $::PASSTEST } then {
            if [expr [string equal $_testmessage ""]] then {
                pass "test succeeded"
            } else {
                pass $_testmessage
            }
        } elseif {$out == $::FAILTEST } then {
            if [expr [string equal $_testmessage ""]] then {
                fail "test failed"
            } else {
                fail $_testmessage
            }
        } elseif {$out == $::UNDECIDEDTEST } then {
            if [expr [string equal $_testmessage ""]] then {
                unsupported "test undecided"
            } else {
                unsupported $_testmessage
            }
        }
    } else {
        if {[info exists out] != 0} then {
            set outname [exec mktemp $::SCRATCHDIR/voms-proxy-init-XXXXXX]
            set id [open $outname "w+"]
            puts $id $out
            close $id
            addlog $outname
        }
        fail "test could not be executed correctly."
    }
}

