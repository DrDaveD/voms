rename fail _fail
rename pass _pass
rename xfail _xfail
rename load_lib _load_lib
rename clone_output _clone_output
rename cleanup _cleanup
rename unsupported _unsupported
set _test_prolog ""
set _test_epilog ""
set _testmessage ""
set LOGOUTS ""

proc load_lib {file} {
    global loaded_libs

    if [info exists loaded_libs($file)] {
        return
    }

    set loaded_libs($file) ""

    if { [search_and_load_file "library file" $file [list $::objdir/lib]] == 0 } {
        _load_lib $file
    }
}

proc fail message {
    global LOGOUTS
    global REPORTDIR
    global _logdescriptor
    global INSTALLDIR

    addlog $INSTALLDIR/var/log/voms.voms1
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"red\">failed</td><td>$message</td>"
    puts $_logdescriptor "<td>"

    foreach name [split $LOGOUTS] {
        if [file exists $name] then {
            set newname [exec mktemp $REPORTDIR/out-XXXXXX]
            file copy -force $name $newname
            puts $_logdescriptor "<a href=\"$newname\">$name</a>"
        }
    }
    puts $_logdescriptor "</td><tr>"
    flush $_logdescriptor
    _fail $message
}

proc pass message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"green\">passed</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    flush $_logdescriptor
    _pass $message
}

proc xfail message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"green\">expected failure</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    _xfail $message
}

proc unsupported message {
    global _logdescriptor
    puts $_logdescriptor "<td align=\"left\" bgcolor=\"orange\">unsupported</td><td></td>"
    puts $_logdescriptor "<td></td><tr>"
    _unsupported $message
}

proc clone_output {message} {
    set value [string compare -length 25 "ERROR: tcl error sourcing" $message]
    if [expr ! $value] then {
        fail "$message"
    }

    set msg [_clone_output "$message"]
    return "$msg"
}

proc logvar {pattern} {
    upvar $pattern value
    set outname [exec mktemp $::SCRATCHDIR/var-$pattern-XXXXXX]

    set id [open $outname "w+"]
    puts $id "$value"
    close $id
    
    addlog $outname
}

proc loadvar {var file} {
    upvar $var temp
    set temp [exec cat $file]
}

proc _do_valgrind_log_file {} {
    set outname [exec mktemp $::SCRATCHDIR/valg-XXXXXX]
    return $outname
}

proc _do_valgrind_cl {} {
    puts "called do_valgrind_cl"
    set VALGRINDPART ""
    puts "reset var"
    if {[info exists ::VALGRIND]} then {
        #check wether leakage occurred
        puts "Setting var"
        set VALGRINDPART "$::DOVALGRIND --trace-children=yes --leak-resolution=high --num-callers=25 --suppressions=suppressions --leak-check=full --log-file=[_do_valgrind_log_file] "
        puts "set var to $VALGRINDPART"
    }

    puts "return var"
    puts "VALGRINDPART=$VALGRINDPART"
    return $VALGRINDPART
}

proc log_exec {outname command} {
    puts "log_exec called"
    if ([info exists ::VALGRIND]) then {
        puts "try valgrind (set path)"
        set VALGRINDPART [_do_valgrind_cl]
        puts "try valgrind (path set)"
        return [log_exec_real $outname $command "$VALGRINDPART"]
        puts "try valgrind (tried)"
    } else {
        puts "no valgrind"
        return [log_exec_real $outname $command]
    }
}

proc log_exec_real {outname command {valgrindpart ""} } {
    puts "log_exec_real 1"
    upvar 2 $outname myname
    puts "log_exec_real 2"
# The following (complicated) code ensures that the output file name
# starts with the name of the command being executed 
    set command [string trim $command]
    set idx  [string first " " $command]
    set idx2 [string last "/" [string range $command 0 [expr {$idx-1}]]]

    puts "COMMAND=$command"
    if [expr {$idx != -1}] then {
        set cname [string range $command [expr {$idx2+1}] [expr {$idx-1}]]
    } else {
        set cname $command
    }
    set cname "$cname-XXXXXX"

    puts "cname=$cname"
# end output file name creation
    set myname [exec mktemp $::SCRATCHDIR/$cname]
    puts "myname=$myname"
# for voms-* commands run them from the install path
# for other commands, look for them in the system path
    set voms [string first "voms" $cname]

    puts "voms=$voms"

    if [expr {$voms == 0}] then {
        set command "$::INSTALLDIR/bin/$command"
    }

    set command "$valgrindpart $command"
    set command [string trim $command]

    puts "command=$command"
#   puts "[uplevel 2 exec $command >& $myname]"
    puts "doing uplevel"
    set bis [catch {set out [uplevel 2 exec $command >& $myname]} out3]
    puts "bis=$bis"

    puts "myname=$myname"
    puts "out3=$out3"
    return $bis
}

proc cleanup {} {
    _cleanup
    puts $::_logdescriptor "</table>"

    puts $::_logdescriptor "</body></html>"
    flush $::_logdescriptor
    close $::_logdescriptor

    if [string equal $::DOCOVERAGE "yes"] then {
        exec lcov --directory ../src --capture -o app.info -q >/dev/null 2>/dev/null
        exec lcov -a zero.info -a app.info -o total.info >/dev/null
        exec rm app.info zero.info
        exec lcov -r total.info "*/../../*" "/usr*" "*/mystack.c" "*/lex.yy.c" "*/vomsfake.tab.c" "*/vomsparser.c" "soapC.c" stdsoap2.c lex.namespaces.c lex.signing.c namespaces.c signing_policy.c failure.c -o voms.info 2>/dev/null
        exec rm total.info
        exec genhtml --no-branch-coverage --show-details --legend --highlight -o $::REPORTDIR/coverage voms.info >/dev/null
        exec rm voms.info
        if [expr ![string equal $::COBERTURA "no"]] then {
            exec $::COBERTURA/cobertura-report.sh --destination $::REPORTDIR/javacoverage --datafile ../src/api/java/cobertura.ser ../src/api/java
        }
    }

    catch {exec rm -rf $::INSTALLDIR/ca}
    catch {exec rm -rf $::SCRATCHDIR}
}

proc testheader {description {testname ""}} {
    global REPORTDIR

    set scriptname [file normalize [uplevel info script]]
    set fname [file dirname [file dirname $scriptname]]

    set realname [string range $scriptname [string length $$fname] end]
    set newname [exec mktemp $REPORTDIR/out-XXXXXX]
    file copy -force $scriptname $newname
    puts $::_logdescriptor "<tr><td align=\"left\"><a href=\"$newname\">$realname</a></td><td align=\"left\">$description</td>"
    set ::LOGOUTS ""
    set ::_testmessage ""
}

#Error codes should be > 6 to avoid conflicting with DejaGNU's own codes
set ::PASSTEST 1000
set ::FAILTEST 1100
set ::UNDECIDEDTEST 1200


proc testmessage { {message "" } } {
    global _testmessage
    set _testmessage $message
}

proc addlog { name } {
    global LOGOUTS
    set LOGOUTS "$LOGOUTS $name"
}

proc test_set_prolog { name } {
    set ::_test_prolog $name
}

proc test_set_epilog { name } {
    set ::_test_epilog $name
}

proc real_do_test { name } {
    global _testmessage

    set res $::UNDECIDEDTEST
    set res2 0

    set scriptname [file normalize [uplevel info script]]
    set fname [file dirname [file dirname $scriptname]]

    set realname [string range $scriptname [string length $$fname] end]

    #kill everything, just to be sure
    catch {exec killall edg-voms 2>/dev/null}
    catch {exec killall middleman 2>/dev/null}
    catch {exec killall valgrind 2>/dev/null}
    catch {exec kill -a valgrind 2>/dev/null}
    catch {exec kill -9 `ps aux |grep valgrind | grep -v grep | tr -s ' ' | cut -d' ' -f2`}

    if {[info exists ::VALGRIND]} then {
        #clean valgrind files
        puts "DELETING: [glob -nocomplain -directory $::SCRATCHDIR valg-*]"
        set list [glob -nocomplain -directory $::SCRATCHDIR valg-*]

        set listed ""
        if { [expr ![catch {set listed [glob -directory $::SCRATCHDIR valg-*]}]]} then {
            puts "listed=$listed"
            foreach f $listed {
                file delete -force $f
            }
        }

#        puts "LIST=$list"
#        exec rm -f $::SCRATCHDIR/valg-*
        puts "FILES: [exec ls $::SCRATCHDIR]"
        set list [glob -nocomplain -directory $::SCRATCHDIR valg-*]
        puts "LIST=$list"
    }

    if {[info exists ::NOJAVALIB] != 0} then {
        if [regexp "vomsapi-java*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return $res
        }
    }

    if {[info exists ::NOCCLIB] != 0} then {
        if [regexp "vomsapi-cpp*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return $res
        }
    }

    if {[info exists ::NOCLIB] != 0} then {
        if [regexp "vomsapi-c[0-9]*" $realname] {
            set $_testmessage "Test disabled."
            unsupported $_testmessage
            return $res
        }
    }

    _backupVOMS voms1
    if [expr ![string equal $::_test_prolog ""]] then {
        set res2 [catch {set out [$::_test_prolog]} out]
        set $_testmessage "Failure during prolog execution."
    }

    puts "res2=$res"

    if { $res2 == 0 } then {
        puts "name=$name"


        if [expr ! [string equal $name "" ]] then {
            set res [catch {set out [$name]} out]
        } else {
            set res [catch {set out [mytest]} out]
        }

        puts "res=$res"
        puts "out=$out"
        if { $res == 0 } then {
            set res $out
        }
        if [expr ! [ string equal $::_test_epilog ""]] then {
            set res2 [catch {set out2 [$::_test_epilog]} out2]
        }
        # Ensures that an eventual failure from the epilog
        # is considered a failure for the whole test
        if { $res2 != 0 } then {
            puts "res2 (epilog)=$res"

            set res $res2
            set $_testmessage "Failure during epilog execution."        
        }
    } else {
        set res $res2
    }
    _restoreVOMS voms1

    return $res
}

proc do_test { {name "" } } {
    global _testmessage

    puts "origtest"
    set res [real_do_test $name]
    puts "afterorig"

    puts "res=$res"
    if { $res == $::PASSTEST} then {
        if {[info exists ::DOVALGRIND]} then {
            puts "do valgrind version of test"
            set ::VALGRIND "1"
            set res2 [real_do_test $name]

            set listed ""
            set failed 0
            if { [expr ![catch {set listed [glob -directory $::SCRATCHDIR valg-*]}]]} then {
                puts "listed=$listed"
                foreach f $listed {

                    if [file size $f] then {
                        loadvar filecontent $f

                        set match "definitely lost: 0"

                        if [expr ![regexp $match $filecontent dummy]] then {
                            set failed 1
                            addlog $f
                        }

#                        set match2 "possibly lost: 0"
#                        if [expr ![regexp $match $filecontent dummy]] then {
#                            set failed 1
#                        }

#                        if $failed then {
#                            addlog $f
#                        }

                    }
                }
            }
            puts "list=$listed"
            unset ::VALGRIND
            if $failed then {
                set res $::FAILTEST
                testmessage "failed valgrind check."
            }
        }
    }

    set ::_test_prolog ""
    set ::_test_epilog ""

    if {$res == $::PASSTEST } then {
        if [expr [string equal $_testmessage ""]] then {
            pass "test succeeded"
        } else {
            pass $_testmessage
        }
    } elseif {$res == $::FAILTEST } then {
        if [expr [string equal $_testmessage ""]] then {
            fail "test failed"
        } else {
            fail $_testmessage
        }
    } elseif {$res == $::UNDECIDEDTEST } then {
        if [expr [string equal $_testmessage ""]] then {
            unsupported "test undecided"
        } else {
            unsupported $_testmessage
        }
    } else {
        set outname [exec mktemp $::SCRATCHDIR/voms-proxy-init-XXXXXX]
        set id [open $outname "w+"]
        puts $id $res
        close $id
        addlog $outname
        fail "test could not be executed correctly."
    }

    puts "DELETING..."
    file delete -force $::SCRATCHDIR/valg-*

}