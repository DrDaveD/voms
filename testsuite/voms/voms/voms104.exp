load_lib vomstest.exp
testheader "See if a default REST request for multiple FQANs works."

proc mytest {} {
    _activateCert mycert2

    _vomsStart voms1
    set outname [exec mktemp $::SCRATCHDIR/openssl-output-XXXXXX]
    set errname [exec mktemp $::SCRATCHDIR/openssl-error-XXXXXX]
    set tempfile [exec mktemp $::SCRATCHDIR/openssl-input-XXXXXX]
    set id [open $tempfile "w+"]
    puts $id "GET /generate-ac?fqans=/voms1/group1,/voms1/group1/Role=TestRole HTTP/1.1"
    puts $id ""
    close $id

    set res [catch {set out [exec openssl s_client -connect localhost:33334 -CApath $::_cadir -cert $::env(X509_USER_CERT) -key $::env(X509_USER_KEY) -quiet 2>$errname <$tempfile >$outname]}]

    _vomsStop voms1

    loadvar out $outname

    if  $res then {
        addlog $outname
        addlog $errname
        testmessage "openssl s_client incorrectly failed."
	
        return $::FAILTEST
    } else {
        set correct1 "HTTP/1.1 200 OK"
        loadvar out2 $outname

        if [regexp $correct1 $out] then {
            #result is correctly ok

            set correct2 "<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?><voms><ac>(.*)</ac></voms>"
            if [regexp $correct2 $out all ac] then {
                # Output was as intended.  Is it a valid AC?
                set acfile [exec mktemp $::SCRATCHDIR/ac-XXXXXX]
                set acid [open $acfile "w+"]
                puts $acid "-----BEGIN ATTRIBUTE CERTIFICATE-----"
                puts $acid [string trim $ac]
                puts $acid "-----END ATTRIBUTE CERTIFICATE-----"
                close $acid
                addlog $acfile

                set res [log_exec vomsout {voms-proxy-init --includeac $acfile}]
                addlog $vomsout

                if $res then {
                    testmessage "voms-proxy-init failed."
                    return $::FAILTEST
                }

                if [log_exec infoout {voms-proxy-info --all}] then {
                    addlog $infoout
                    testmessage "voms-proxy-info failed."
                    return $::FAILTEST
                } else {
                    #match against known (correct) output
                    set correct3 "attribute : /voms1/group1
attribute : /voms1/group1/Role=TestRole
attribute : /voms1"
                    loadvar out3 $infoout
                    addlog $infoout
                    if [regexp $correct3 $out3] then {
                        testmessage "AC was valid"
                        
                        return $::PASSTEST
                    } 
                    logvar correct3
                    addlog $out3
                    testmessage "AC did not contain correct information."
                    return $::FAILTEST
                }
            } else {
                logvar correct2
                testmessage "Output was not as intended."
                addlog $outname
                return $::FAILTEST
            }
        }
	
        addlog $outname
        testmessage "REST output was incorrect."
        return $::FAILTEST
    }
}

do_test
